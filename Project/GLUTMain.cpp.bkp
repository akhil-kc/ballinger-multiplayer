#undef UNICODE
#define _CRT_SECURE_NO_WARNINGS
#define _WINSOCK_DEPRECATED_NO_WARNINGS
#define WIN32_LEAN_AND_MEAN

#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <fstream>

// Need to link with Ws2_32.lib
#pragma comment (lib, "Ws2_32.lib")
// #pragma comment (lib, "Mswsock.lib")
#include "cGame.h"
#define DEFAULT_BUFLEN 512
const int SERVER_PORT = 25001;
#define DEFAULT_BUFLEN 512
#define DEFAULT_PORT "27014"
int visits = 0; /*the number client connect*/

//Delete console
//#pragma comment(linker, "/subsystem:\"windows\" /entry:\"mainCRTStartup\"")

cGame Game;

void AppReshape(int w, int h)
{
	Game.Reshape(w,h);
}
void AppRender()
{
	Game.Render();
}
void AppKeyboard(unsigned char key, int x, int y)
{
	Game.ReadKeyboard(key,x,y,true);
}
void AppKeyboardUp(unsigned char key, int x, int y)
{
	Game.ReadKeyboard(key,x,y,false);
}
void AppSpecialKeys(int key, int x, int y)
{
	Game.ReadSpecialKeyboard(key,x,y,true);
}
void AppSpecialKeysUp(int key, int x, int y)
{
	Game.ReadSpecialKeyboard(key,x,y,false);
}
void AppMouse(int button, int state, int x, int y)
{
	Game.ReadMouse(button,state,x,y);
}
void AppMouseMotion(int x, int y)
{
	Game.ReadMouseMotion(x,y);
}
void AppIdle()
{
	if(!Game.Loop()) exit(0);
}

int startServer() {

	struct sockaddr_in serverAddr; /*server address*/
	struct sockaddr_in clientAddr; /*client address*/

	int serverSock; /*server socket, and client sock*/
	char buf[100]; /*buffer the message send and receive*/
	int len = sizeof(struct sockaddr);
	char ip[15]; /*client address*/
	int serverPort, clientPort; /*client and server address*/

	WSADATA wsaData;
	WSAStartup(0x0202, &wsaData); /*windows socket startup */

	memset((char*)&serverAddr, 0, sizeof(serverAddr));
	serverAddr.sin_family = AF_INET; /*set server address protocol family*/
	//serverAddr.sin_addr.s_addr = INADDR_ANY;
	serverAddr.sin_addr.s_addr = inet_addr("127.0.0.1");

	
	serverPort = SERVER_PORT;
	

	if (serverPort>0)
		serverAddr.sin_port = htons((u_short)serverPort);/*set port*/
	else {
		fprintf(stderr, "bad port number \n");
		return 0;
	}

	serverSock = socket(PF_INET, SOCK_DGRAM, 0);/*create a socket*/
	if (serverSock<0) {
		fprintf(stderr, "socket creating failed\n");
		return 0;
	}

	if (bind(serverSock, (LPSOCKADDR)&serverAddr, len)<0) {/*bind a server address and port*/
		fprintf(stderr, "bind failed\n");
		return 0;
	}

	// Set Non Blocking Mode, specified via last parameter
	// 0 Disabled 
	// !0 Enabled 
	unsigned long int nonBlockingMode = 1;
	int result = ioctlsocket(serverSock, FIONBIO, &nonBlockingMode);

	if (result)
	{
		fprintf(stderr, "ioctlsocket failed\n");
		return 0;
	}


	
		// Setup the Client Address ( IP & port )
	//	struct sockaddr_in clientAddr;
		// this information will be filled in when recvfrom executes

		// Check for messages
		FD_SET set;
		timeval timeVal;

		FD_ZERO(&set);
		FD_SET(serverSock, &set);

		timeVal.tv_sec = 0;
		timeVal.tv_usec = 0;

		result = select(FD_SETSIZE, &set, NULL, NULL, &timeVal);

		if (result == 0)
		{
			//Sleep(300);
			//continue;
			fprintf(stderr, "result is zero\n");
		}

		if (result == SOCKET_ERROR)
		{
			fprintf(stderr, "select error\n");
			exit(1);
		}

		memset(buf, 0, sizeof(buf));
		recvfrom(serverSock, buf, sizeof(buf), 0, (LPSOCKADDR)&clientAddr, &len);

		visits++;
		strcpy(ip, inet_ntoa(clientAddr.sin_addr));
		clientPort = ntohs((u_short)clientAddr.sin_port);
		fprintf(stdout, "CLients ip address is %s\n", ip);
		fprintf(stdout, "\nA client come from ip:%s port:%d .\nThis server has been contacted %d time%s\n", ip, clientPort, visits, visits == 1 ? "." : "s.");

		while (1)
		{
			printf("\n--->From the client: ");
			printf("%s", buf);

			memset(buf, 0, sizeof(buf));
			printf("\nServer--->: ");
			gets_s(buf);
			sendto(serverSock, buf, sizeof(buf), 0, (LPSOCKADDR)&clientAddr, len);
			if (strcmp(buf, "end") == 0) break; /* send "end" to close client and exit loop*/
			if (strcmp(buf, "close") == 0) return 1; /* send "close" to close both */

			memset(buf, 0, sizeof(buf));
			recvfrom(serverSock, buf, sizeof(buf), 0, (LPSOCKADDR)&clientAddr, &len);

			// moderator note: This code is a buffer overflow attack waiting to happen

			if (strcmp(buf, "end") == 0) break; /* receive "end" to exit loop */
		}
	

	return 1;

}


void main(int argc, char** argv)
{
	int res_x,res_y,pos_x,pos_y;
	int x;
	bool client_flag = false;
	bool server_flag = false;
	std::cout << "In main function";
	server_flag = true;
	if (server_flag)
	{
		x = startServer();
	}
	
	if (x == 1) {
		//GLUT initialization
		glutInit(&argc, argv);

		//RGBA with double buffer
		glutInitDisplayMode(GLUT_DEPTH | GLUT_RGBA | GLUT_ALPHA | GLUT_DOUBLE);

		//Create centered window
		res_x = glutGet(GLUT_SCREEN_WIDTH);
		res_y = glutGet(GLUT_SCREEN_HEIGHT);
		pos_x = (res_x >> 1) - (SCREEN_WIDTH >> 1);
		pos_y = (res_y >> 1) - (SCREEN_HEIGHT >> 1);

		glutInitWindowPosition(pos_x, pos_y);
		glutInitWindowSize(SCREEN_WIDTH, SCREEN_HEIGHT);
		glutCreateWindow("The Ballenger Server");
		//glutFullScreen();

		/*glutGameModeString("800x600:32");
		glutEnterGameMode();*/

		//Make the default cursor disappear
		glutSetCursor(GLUT_CURSOR_NONE);

		//Register callback functions
		glutReshapeFunc(AppReshape);
		glutDisplayFunc(AppRender);
		glutKeyboardFunc(AppKeyboard);
		glutKeyboardUpFunc(AppKeyboardUp);
		glutSpecialFunc(AppSpecialKeys);
		glutSpecialUpFunc(AppSpecialKeysUp);
		glutMouseFunc(AppMouse);
		glutMotionFunc(AppMouseMotion);
		glutPassiveMotionFunc(AppMouseMotion);
		glutIdleFunc(AppIdle);

		//GLEW initialization
		GLint GlewInitResult = glewInit();
		if (GLEW_OK != GlewInitResult)
		{
			printf("ERROR: %s\n", glewGetErrorString(GlewInitResult));
			exit(EXIT_FAILURE);
		}

		//Game initializations
		Game.Init(1);

		//Application loop
		glutMainLoop();
	}
	else {
		fprintf(stderr, "game didn't start from server");
	}
}
